function sFiles = script_new(SubjectNames, RawFiles, iSubj, name_mkr, condition)

% Process: Create link to raw file
sFiles = [];
% Process: Create link to raw file
sFiles = bst_process('CallProcess', 'process_import_data_raw', sFiles, [], ...
    'subjectname',    SubjectNames{iSubj}, ...
    'datafile',       {RawFiles{iSubj}, 'EEG-BRAINAMP'}, ...
    'channelreplace', 1, ...
    'channelalign',   1, ...
    'evtmode',        'value');


        if ~contains(name_mkr(iSubj),'ICA')
            if ~contains(name_mkr(iSubj), 'josC')

                % Process: Split raw file
                sFiles = bst_process('CallProcess', 'process_split_raw_file', sFiles, [], ...
                    'eventname',       'END_test', ...
                    'keepbadsegments', 0);
            else
            end
            % Process: Detect: B
            sFiles = bst_process('CallProcess', 'process_evt_detect', sFiles, [], ...
                'eventname',    'B', ...
                'channelname',  'FP1', ...
                'timewindow',   [], ...
                'bandpass',     [1.5, 15], ...
                'threshold',    2, ...
                'blanking',     0.8, ...
                'isnoisecheck', 0, ...
                'isclassify',   0);
    
            % Process: Detect: B
            sFiles = bst_process('CallProcess', 'process_evt_detect', sFiles, [], ...
                'eventname',    'B', ...
                'channelname',  'FP2', ...
                'timewindow',   [], ...
                'bandpass',     [1.5, 15], ...
                'threshold',    2, ...
                'blanking',     0.8, ...
                'isnoisecheck', 0, ...
                'isclassify',   0);
            
            % Process: Detect: B
            sFiles = bst_process('CallProcess', 'process_evt_detect', sFiles, [], ...
                'eventname',    'B', ...
                'channelname',  'F7', ...
                'timewindow',   [], ...
                'bandpass',     [1.5, 15], ...
                'threshold',    2, ...
                'blanking',     0.8, ...
                'isnoisecheck', 0, ...
                'isclassify',   0);
            
            % Process: Detect: B
            sFiles = bst_process('CallProcess', 'process_evt_detect', sFiles, [], ...
                'eventname',    'B', ...
                'channelname',  'F8', ...
                'timewindow',   [], ...
                'bandpass',     [1.5, 15], ...
                'threshold',    2, ...
                'blanking',     0.8, ...
                'isnoisecheck', 0, ...
                'isclassify',   0);
            
            % Process: SSP EOG: B
            sFiles = bst_process('CallProcess', 'process_ssp_eog', sFiles, [], ...
                'eventname',   'B', ...
                'sensortypes', 'EEG', ...
                'usessp',      1, ...
                'select',      1);
        else
        end
    
        % Process: Import MEG/EEG: Events
        if iSubj == 5 || iSubj == 7
            sFiles = bst_process('CallProcess', 'process_import_data_event', sFiles, [], ...
            'subjectname',   SubjectNames{iSubj}, ...
            'condition',     '', ...
            'eventname',     'END_test,START_test', ...
            'timewindow',    [], ...
            'epochtime',     [19, 25], ...
            'split',         30, ...
            'createcond',    0, ...
            'ignoreshort',   1, ...
            'usectfcomp',    1, ...
            'usessp',        1, ...
            'freq',          [], ...
            'baseline',      [], ...
            'blsensortypes', 'MEG, EEG');
        else 
        end
        switch condition
            case "MLV"
                sFiles = bst_process('CallProcess', 'process_import_data_event', sFiles, [], ...
                'subjectname',   SubjectNames{iSubj}, ...
                'condition',     '', ...
                'eventname',     'End_B,Start_A', ...
                'timewindow',    [], ...
                'epochtime',     [6.88 28.12], ...
                'split',         30, ...
                'createcond',    0, ...
                'ignoreshort',   1, ...
                'usectfcomp',    1, ...
                'usessp',        1, ...
                'freq',          [], ...
                'baseline',      [], ...
                'blsensortypes', 'MEG, EEG');
            case "MRV"
                sFiles = bst_process('CallProcess', 'process_import_data_event', sFiles, [], ...
                'subjectname',   SubjectNames{iSubj}, ...
                'condition',     '', ...
                'eventname',     'End_B,Start_A', ...
                'timewindow',    [], ...
                'epochtime',     [1.50 30], ...%[3.94 30], ... 
                'split',         30, ...
                'createcond',    0, ...
                'ignoreshort',   1, ...
                'usectfcomp',    1, ...
                'usessp',        1, ...
                'freq',          [], ...
                'baseline',      [], ...
                'blsensortypes', 'MEG, EEG');
            case "MI_1"
                sFiles = bst_process('CallProcess', 'process_import_data_event', sFiles, [], ...
                'subjectname',   SubjectNames{iSubj}, ...
                'condition',     '', ...
                'eventname',     'End_B,Start_A', ...
                'timewindow',    [], ...
                'epochtime',     [6.88 28.12], ...
                'split',         30, ...
                'createcond',    0, ...
                'ignoreshort',   1, ...
                'usectfcomp',    1, ...
                'usessp',        1, ...
                'freq',          [], ...
                'baseline',      [], ...
                'blsensortypes', 'MEG, EEG');
            case "MI_2"
                sFiles = bst_process('CallProcess', 'process_import_data_event', sFiles, [], ...
                'subjectname',   SubjectNames{iSubj}, ...
                'condition',     '', ...
                'eventname',     'End_B,Start_A', ...
                'timewindow',    [], ...
                'epochtime',     [3.94 30],...%[1.50 30], ...
                'split',         30, ...
                'createcond',    0, ...
                'ignoreshort',   1, ...
                'usectfcomp',    1, ...
                'usessp',        1, ...
                'freq',          [], ...
                'baseline',      [], ...
                'blsensortypes', 'MEG, EEG');
        end

        % Process: Fourier transform (FFT)
        sFiles = bst_process('CallProcess', 'process_fft', sFiles, [], ...
        'timewindow',  [], ...
        'units',       'physical', ...  % Physical: U2/Hz
        'sensortypes', 'EEG', ...
        'avgoutput',   0);
        
        % Process: Measure from complex values: Magnitude
        sFiles = bst_process('CallProcess', 'process_tf_measure', sFiles, [], ...
            'measure',   2, ...  % Magnitude
            'overwrite', 0);
end
